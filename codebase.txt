app.py
from flask import Flask, jsonify
from flask_swagger_ui import get_swaggerui_blueprint
from models import db
from config import Config
import logging
from routes import api


def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)

    db.init_app(app)

    # Configure logging
    logging.basicConfig(filename='api.log', level=logging.INFO,
                        format='%(asctime)s:%(levelname)s:%(message)s')
    console = logging.StreamHandler()
    console.setLevel(logging.INFO)
    logging.getLogger('').addHandler(console)

    # Root route
    @app.route('/')
    def home():
        return jsonify({"message": "Welcome to the Work Pass Extension API"})

    # Swagger UI configuration
    SWAGGER_URL = '/api/docs'
    API_URL = '/static/swagger.json'
    swaggerui_blueprint = get_swaggerui_blueprint(SWAGGER_URL, API_URL, config={'app_name': "Work Pass Extension API"})
    app.register_blueprint(swaggerui_blueprint, url_prefix=SWAGGER_URL)

    # Register API routes
    app.register_blueprint(api, url_prefix='/api')

    return app

app = create_app()

if __name__ == '__main__':
    app.run(debug=True)

config.py
import os

class Config:
    basedir = os.path.abspath(os.path.dirname(__file__))
    SQLALCHEMY_DATABASE_URI = f'sqlite:///{os.path.join(basedir, "with_amendments.db")}'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    API_KEY = os.environ.get('API_KEY', 'default_key')
    REQUIRE_API_KEY = os.environ.get('REQUIRE_API_KEY', 'False').lower() == 'true'
    ITEMS_PER_PAGE = 20

models.py
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

db = SQLAlchemy()

class Application(db.Model):
    __tablename__ = 'applications'
    id = db.Column(db.String, primary_key=True)
    fin = db.Column(db.String, nullable=False)
    name = db.Column(db.String, nullable=False)
    pass_type = db.Column(db.String, nullable=False)
    doa = db.Column(db.Date, nullable=False)
    company_uen = db.Column(db.String, nullable=False)
    status = db.Column(db.String, nullable=False)
    doe = db.Column(db.Date, nullable=False)
    amendments = db.relationship('Amendment', backref='application', lazy=True)


class Amendment(db.Model):
    __tablename__ = 'amendments'
    amendment_id = db.Column(db.String, primary_key=True)
    application_id = db.Column(db.String, db.ForeignKey('applications.id'), nullable=False)
    amendment_date = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    original_value = db.Column(db.String, nullable=False)
    amended_value = db.Column(db.String, nullable=False)

class STVP(db.Model):
    __tablename__ = 'stvps'
    id = db.Column(db.String, primary_key=True)
    application_id = db.Column(db.String, db.ForeignKey('applications.id'), nullable=False)
    start_date = db.Column(db.Date, nullable=False)
    end_date = db.Column(db.Date, nullable=False)

routes.py
from flask import Blueprint, jsonify, request
from models import Application, Amendment, STVP, db
from utils import require_api_key
import logging
from datetime import datetime, date, timedelta
from sqlalchemy import desc, func
from config import Config
import uuid

api = Blueprint('api', __name__)

def generate_amendment_id(application_id):
    # Get the count of existing amendments for this application
    count = Amendment.query.filter_by(application_id=application_id).count()
    # Increment the count and format the amendment ID
    return f'P{(count + 1):02d}{application_id}'


@api.route('/applications/search', methods=['GET'])
@require_api_key
def search_applications():
    fin = request.args.get('fin')
    if not fin:
        logging.warning("FIN parameter is missing")
        return jsonify({"error": "FIN parameter is required"}), 400

    try:
        logging.info(f"Searching for applications with FIN: {fin}")
        applications = Application.query.filter_by(fin=fin).all()
        logging.info(f"Found {len(applications)} applications")

        if not applications:
            logging.info(f"No applications found for FIN: {fin}")
            return jsonify({"message": "No applications found for the given FIN"}), 404

        result = [{
            "id": app.id,
            "name": app.name,
            "pass_type": app.pass_type,
            "doa": app.doa.isoformat(),
            "doe": app.doe.isoformat(),
            "status": app.status,
            "company_uen": app.company_uen
        } for app in applications]

        logging.info(f"Returning {len(result)} applications")
        return jsonify(result)
    except Exception as e:
        logging.error(f"An error occurred while searching for applications: {str(e)}")
        return jsonify({"error": "An error occurred while searching for applications"}), 500

@api.route('/applications/<string:application_id>/update-expiry', methods=['PUT'])
@require_api_key
def update_expiry(application_id):
    new_doe = request.json.get('new_doe')
    if not new_doe:
        return jsonify({"error": "New date of expiry (new_doe) is required"}), 400

    try:
        new_doe = datetime.strptime(new_doe, '%Y-%m-%d').date()
    except ValueError:
        return jsonify({"error": "Invalid date format. Use YYYY-MM-DD"}), 400

    application = Application.query.get(application_id)
    if not application:
        return jsonify({"error": "Application not found"}), 404

    if application.doe < datetime.now().date():
        return jsonify({"error": "Cannot update expired application"}), 400

    old_doe = application.doe
    application.doe = new_doe

    amendment_id = generate_amendment_id(application_id)
    amendment = Amendment(
        amendment_id=amendment_id,
        application_id=application_id,
        original_value=old_doe.isoformat(),
        amended_value=new_doe.isoformat()
    )

    db.session.add(amendment)
    db.session.commit()

    return jsonify({"message": "Expiry date updated successfully", "amendment_id": amendment_id}), 200

@api.route('/applications/<string:application_id>/create-stvp', methods=['POST'])
@require_api_key
def create_stvp(application_id):
    application = Application.query.get(application_id)
    if not application:
        return jsonify({"error": "Application not found"}), 404

    current_date = date.today()
    if application.doe >= current_date:
        return jsonify({"error": "Cannot create STVP for non-expired pass"}), 400

    existing_stvp = STVP.query.filter_by(application_id=application_id).order_by(STVP.end_date.desc()).first()

    if existing_stvp and existing_stvp.end_date >= current_date:
        # Extend existing STVP
        old_end_date = existing_stvp.end_date
        existing_stvp.end_date = old_end_date + timedelta(days=30)
        db.session.commit()
        return jsonify({
            "message": "Existing STVP extended",
            "new_end_date": existing_stvp.end_date.isoformat()
        }), 200

    # Create new STVP
    start_date = max(application.doe, current_date)
    end_date = start_date + timedelta(days=30)
    new_stvp = STVP(
        id=str(uuid.uuid4()),  # Generate a unique ID for the STVP
        application_id=application_id,
        start_date=start_date,
        end_date=end_date
    )
    db.session.add(new_stvp)
    db.session.commit()

    return jsonify({
        "message": "New STVP created",
        "start_date": start_date.isoformat(),
        "end_date": end_date.isoformat()
    }), 201

@api.route('/applications', methods=['GET'])
@require_api_key
def list_applications():
    page = request.args.get('page', 1, type=int)
    per_page = request.args.get('per_page', Config.ITEMS_PER_PAGE, type=int)

    applications = Application.query.paginate(page=page, per_page=per_page, error_out=False)

    if not applications.items:
        return jsonify({"message": "No applications found"}), 404

    result = [{
        "id": app.id,
        "name": app.name,
        "pass_type": app.pass_type,
        "doa": app.doa.isoformat(),
        "doe": app.doe.isoformat(),
        "status": app.status
    } for app in applications.items]

    return jsonify({
        "applications": result,
        "total": applications.total,
        "pages": applications.pages,
        "current_page": page
    })

@api.route('/applications/<string:application_id>/amendments', methods=['GET'])
@require_api_key
def get_amendment_history(application_id):
    amendments = Amendment.query.filter_by(application_id=application_id).order_by(Amendment.amendment_date).all()

    if not amendments:
        return jsonify({"message": "No amendments found for this application"}), 404

    result = [{
        "amendment_id": amendment.amendment_id,
        "amendment_date": amendment.amendment_date.isoformat(),
        "original_value": amendment.original_value,
        "amended_value": amendment.amended_value
    } for amendment in amendments]

    return jsonify(result)

utils.py
from functools import wraps
from flask import request, jsonify
from config import Config
import logging

def require_api_key(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        if Config.REQUIRE_API_KEY:
            if request.headers.get('X-API-Key') and request.headers.get('X-API-Key') == Config.API_KEY:
                return f(*args, **kwargs)
            else:
                logging.warning('Unauthorized access attempt')
                return jsonify({"message": "Unauthorized"}), 401
        return f(*args, **kwargs)
    return decorated

withamendments.py
import sqlite3
from faker import Faker
from datetime import datetime, timedelta
import random

# Connect to the database
connection = sqlite3.connect('with_amendments.db')
cursor = connection.cursor()

# Create schema
def create_schema(cursor):
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS applications (
            id TEXT PRIMARY KEY,
            fin TEXT NOT NULL,
            name TEXT NOT NULL,
            pass_type TEXT NOT NULL,
            doa TEXT NOT NULL,
            company_uen TEXT NOT NULL,
            status TEXT NOT NULL,
            doe TEXT NOT NULL
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS amendments (
            amendment_id TEXT PRIMARY KEY,
            application_id TEXT NOT NULL,
            amendment_date TEXT NOT NULL,
            original_value TEXT NOT NULL,
            amended_value TEXT NOT NULL,
            FOREIGN KEY (application_id) REFERENCES applications (id)
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS stvps (
            id TEXT PRIMARY KEY,
            application_id TEXT NOT NULL,
            start_date TEXT NOT NULL,
            end_date TEXT NOT NULL,
            FOREIGN KEY (application_id) REFERENCES applications (id)
        )
    ''')

# Recreate the schema
cursor.execute("DROP TABLE IF EXISTS applications")
cursor.execute("DROP TABLE IF EXISTS amendments")
create_schema(cursor)

# Initialize Faker
fake = Faker()
application_count = 20  # Testing dataset

# Generate applications
applications_data = []
amendments_data = []

# Generate applications and amendments
for app_index in range(1, application_count + 1):
    # Generate application details
    application_id = f"A{str(app_index).zfill(4)}"
    fin = fake.bothify(text='?#######?')
    name = fake.name()
    pass_type = random.choice(['Employment Pass', 'EntrePass', 'S Pass', 'Dependant’s Pass', 'Long-Term Visit Pass'])
    doa = fake.date_between(start_date='-5y', end_date='today').isoformat()  # 2019 to today
    company_uen = fake.bothify(text='UEN#####')
    status = random.choice(['Pending', 'Approved', 'Rejected', 'Withdrawn', 'Cancelled', 'Issued'])
    doe = (datetime.strptime(doa, '%Y-%m-%d') + timedelta(days=365 * random.randint(1, 5))).strftime('%Y-%m-%d')  # 1-5 years after doa
    applications_data.append((application_id, fin, name, pass_type, doa, company_uen, status, doe))

    # Generate amendments
    amendment_count = random.randint(0, 3)
    last_amend_date = datetime.strptime(doa, '%Y-%m-%d')
    for amend_index in range(1, amendment_count + 1):
        last_amend_date += timedelta(weeks=random.randint(2, 4))
        if last_amend_date >= datetime.strptime(doe, '%Y-%m-%d'):
            break
        amendment_id = f"P{str(amend_index).zfill(2)}{application_id}"
        amendment_date = last_amend_date.strftime('%Y-%m-%d %H:%M:%S')
        original_value = doe
        amended_value = (datetime.strptime(original_value, '%Y-%m-%d') + timedelta(days=30)).strftime('%Y-%m-%d')
        amendments_data.append((amendment_id, application_id, amendment_date, original_value, amended_value))
        doe = amended_value  # Update doe after amendment

    # Update the final doe in applications
    applications_data[-1] = (*applications_data[-1][:-1], doe)  # Update in-memory
    cursor.execute("UPDATE applications SET doe = ? WHERE id = ?", (doe, application_id))

    # Generate STVPs for expired passes
    stvps_data = []
    current_date = datetime.now().date()
    for app_id, _, _, _, _, _, _, doe in applications_data:
        if datetime.strptime(doe, '%Y-%m-%d').date() < current_date:
            stvp_id = f"STVP{app_id[1:]}"
            start_date = (datetime.strptime(doe, '%Y-%m-%d') + timedelta(days=1)).strftime('%Y-%m-%d')
            end_date = (datetime.strptime(doe, '%Y-%m-%d') + timedelta(days=30)).strftime('%Y-%m-%d')
            stvps_data.append((stvp_id, app_id, start_date, end_date))

# Insert applications
cursor.executemany('''
    INSERT INTO applications (id, fin, name, pass_type, doa, company_uen, status, doe)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
''', applications_data)

# Insert amendments
cursor.executemany('''
    INSERT INTO amendments (amendment_id, application_id, amendment_date, original_value, amended_value)
    VALUES (?, ?, ?, ?, ?)
''', amendments_data)

# Insert STVPs
cursor.executemany('''
    INSERT INTO stvps (id, application_id, start_date, end_date)
    VALUES (?, ?, ?, ?)
''', stvps_data)

# Commit and close
connection.commit()
connection.close()

print(f"{len(applications_data)} applications and {len(amendments_data)} amendments added.")
print(f"{len(stvps_data)} STVPs added.")